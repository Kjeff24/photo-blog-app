AWSTemplateFormatVersion: '2010-09-09'
Description: API Failover using Route 53, CloudWatch Alarm, and Lambda

Parameters:
  PrimaryRegionalDomainName:
    Type: String
    Description: "Primary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  BackupRegionalDomainName:
    Type: String
    Description: "Secondary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  DomainName:
    Type: String
    Description: "Domain name used for both primary and backup api gateway (e.g. api-photoblog.com)"
  AdminEmail:
    Type: String
    Description: "Administrator email for failover notifications"
  HostedZoneName:
    Type: String
    Description: "The name of the Route 53 hosted zone (must end with a dot e.g. photoblog.com.)"
  PrimaryHostedZoneID:
    Type: String
    Description: "primary region route 53 hosted zone ID"
  BackupHostedZoneID:
    Type: String
    Description: "backup region route 53 hosted zone ID"
  BackupRegion:
    Type: String
    Default: "eu-west-1"
    Description: "Backup region"
  BackupRegionUserPoolId:
    Type: String
    Description: "User pool ID in backup region"
  GlobalDynamodbTable:
    Type: String
    Default: "dynamodb-global-table"
    Description: "Global DynamoDB table name"

Resources:
  # ✅ Route 53 Health Check for Primary API
  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        ResourcePath: "/health"
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 10
        FailureThreshold: 2
      HealthCheckTags:
        - Key: Name
          Value: "Primary API Health Check"

  # ✅ CloudWatch Alarm for Health Check Failure
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Triggers failover if the primary API health check fails"
      AlarmName: "APIGatewayHealthCheckFailure"
      Namespace: "AWS/Route53"
      MetricName: HealthCheckStatus
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt Route53HealthCheck.HealthCheckId
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      Statistic: Minimum
      Period: 10
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SNSTopic
  
  # ✅ Route 53 Failover DNS Record for primary api gateway
  Route53FailoverRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      SetIdentifier: "Primary"
      HealthCheckId: !Ref Route53HealthCheck
      Failover: PRIMARY
      AliasTarget:
        DNSName: !Ref PrimaryRegionalDomainName
        HostedZoneId: !Ref PrimaryHostedZoneID

  # ✅ Route 53 Failover DNS Record for backup api gateway
  Route53FailoverRecordSecondary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      SetIdentifier: "Secondary"
      Failover: SECONDARY
      AliasTarget:
        DNSName: !Ref BackupRegionalDomainName
        HostedZoneId: !Ref BackupHostedZoneID

  # ✅ SNS Topic for Notifications
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ApiFailoverNotification"

  # ✅ Subscribe Admin Email to SNS Topic
  SNSSubscriptionEmail:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: !Ref AdminEmail

  # ✅ Subscribe Lambda to SNS Topic
  SNSSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: lambda
      Endpoint: !GetAtt FailoverLambdaFunction.Arn

  # ✅ Lambda Function for Failover Alerts
  FailoverLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "FailoverNotificationLambda"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ADMIN_EMAIL: !Ref AdminEmail
          SNS_TOPIC_ARN: !Ref SNSTopic
          BACKUP_REGION: !Ref BackupRegion
          BACKUP_REGION_USER_POOL_ID: !Ref BackupRegionUserPoolId
          DYNAMODB_TABLE: !Ref GlobalDynamodbTable
      Code:
        ZipFile: |
          import os
          import boto3
          import json

          def lambda_handler(event, context):
            admin_email = os.environ['ADMIN_EMAIL']
            backup_region = os.environ['BACKUP_REGION']
            backup_user_pool_id = os.environ['BACKUP_REGION_USER_POOL_ID']
            global_dynamo_db_table = os.environ['DYNAMODB_TABLE']
            sns_topic_arn = os.environ['SNS_TOPIC_ARN']
          
            # Initialize clients
            sns = boto3.client('sns')
            dynamodb = boto3.client('dynamodb', region_name=backup_region)
            cognito = boto3.client('cognito-idp', region_name=backup_region)
          
          
            # Notify admin of failover
            message = f"Primary API is down. Failover to Secondary API initiated."
            response = sns.publish(
            TopicArn=sns_topic_arn,
            Message=message,
            Subject="API Gateway Failover Alert"
            )
            
            # Scan DynamoDB table using the specified index
            response = dynamodb.query(
            TableName=global_dynamo_db_table,
            IndexName="TypeIndex",
            KeyConditionExpression="#t = :typeValue",
            ExpressionAttributeNames={
            "#t": "type"
          },
            ExpressionAttributeValues={
            ":typeValue": {"S": "user"}
          }
            )
          
            # Process each item
            for item in response.get('Items', []):
              email = item.get('pk', {}).get('S')
              full_name = item.get('sk', {}).get('S')
              
              if email and full_name:
                # Create a new user in the Cognito User Pool
                try:
                  cognito.admin_create_user(
                    UserPoolId=backup_user_pool_id,
                    Username=email,
                    UserAttributes=[
                      {'Name': 'email', 'Value': email},
                      {'Name': 'name', 'Value': full_name}
                    ]
                  )
                except cognito.exceptions.UsernameExistsException:
                  print(f"User {email} already exists.")
                except Exception as e:
                  print(f"Error creating user {email}: {e}")
          
          
            return {
                'statusCode': 200,
                'body': json.dumps('Failover Notification Sent')
            }


  # ✅ Failover lambda function role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSNSPublish"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref SNSTopic

        # ✅ Allow querying the DynamoDB table (for failover data retrieval)
        - PolicyName: "LambdaDynamoDBQuery"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !Sub arn:aws:dynamodb:${BackupRegion}:${AWS::AccountId}:table/${GlobalDynamodbTable}
                  - !Sub arn:aws:dynamodb:${BackupRegion}:${AWS::AccountId}:table/${GlobalDynamodbTable}/index/*

        # ✅ Allow creating users in the Cognito User Pool
        - PolicyName: "LambdaCognitoUserManagement"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:AdminCreateUser"
                Resource:
                  - !Sub "arn:aws:cognito-idp:${BackupRegion}:${AWS::AccountId}:userpool/${BackupRegionUserPoolId}"

