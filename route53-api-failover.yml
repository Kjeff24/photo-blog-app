AWSTemplateFormatVersion: '2010-09-09'
Description: API Failover using Route 53, CloudWatch Alarm, and Lambda

Parameters:
  PrimaryRegionalDomainName:
    Type: String
    Description: "Primary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  BackupRegionalDomainName:
    Type: String
    Description: "Secondary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  DomainName:
    Type: String
    Description: "Domain name used for both primary and backup api gateway (e.g. api-photoblog.com)"
  AdminEmail:
    Type: String
    Description: "Administrator email for failover notifications"
  HostedZoneName:
    Type: String
    Description: "The name of the Route 53 hosted zone (must end with a dot e.g. photoblog.com.)"
  PrimaryHostedZoneID:
    Type: String
    Description: "eu-central-1 route 53 hosted zone ID"
  BackupHostedZoneID:
    Type: String
    Description: "eu-west-1 route 53 hosted zone ID"

Resources:
  # ✅ Route 53 Health Check for Primary API
  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        ResourcePath: "/health"
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: Name
          Value: "Primary API Health Check"

  # ✅ Route 53 Failover DNS Record for primary api gateway
  Route53FailoverRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      SetIdentifier: "Primary"
      HealthCheckId: !Ref Route53HealthCheck
      Failover: PRIMARY
      AliasTarget:
        DNSName: !Ref PrimaryRegionalDomainName
        HostedZoneId: !Ref PrimaryHostedZoneID

  # ✅ Route 53 Failover DNS Record for backup api gateway
  Route53FailoverRecordSecondary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      SetIdentifier: "Secondary"
      Failover: SECONDARY
      AliasTarget:
        DNSName: !Ref BackupRegionalDomainName
        HostedZoneId: !Ref BackupHostedZoneID

  # ✅ CloudWatch Alarm for Health Check Failure
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Triggers failover if the primary API health check fails"
      AlarmName: "APIGatewayHealthCheckFailure"
      Namespace: "AWS/Route53"
      MetricName: HealthCheckStatus
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SNSTopic

  # ✅ SNS Topic for Notifications
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ApiFailoverNotification"

  # ✅ Subscribe Admin Email to SNS Topic
  SNSSubscriptionEmail:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: !Ref AdminEmail

  # ✅ Subscribe Lambda to SNS Topic
  SNSSubscriptionLambda:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: lambda
      Endpoint: !GetAtt FailoverLambdaFunction.Arn

  # ✅ Lambda Function for Failover Alerts
  FailoverLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "FailoverNotificationLambda"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ADMIN_EMAIL: !Ref AdminEmail
          PRIMARY_API: !Ref DomainName
          BACKUP_API: !Ref BackupRegionalDomainName
          SNS_TOPIC_ARN: !Ref SNSTopic
      Code:
        ZipFile: |
          import os
          import boto3
          import json

          sns = boto3.client('sns')
          def lambda_handler(event, context):
              admin_email = os.environ['ADMIN_EMAIL']
              message = f"Primary API is down. Failover to Secondary API initiated."
              response = sns.publish(
                  TopicArn=os.environ['SNS_TOPIC_ARN'],
                  Message=message,
                  Subject="API Gateway Failover Alert"
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Failover Notification Sent')
              }

  # ✅ Failover lambda function role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSNSPublish"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref SNSTopic
