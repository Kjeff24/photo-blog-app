AWSTemplateFormatVersion: '2010-09-09'
Description: API Failover using Route 53, CloudWatch Alarm, and Lambda

Parameters:
  PrimaryRegionalDomainName:
    Type: String
    Description: "Primary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  BackupRegionalDomainName:
    Type: String
    Description: "Secondary API Gateway regional domain name (e.g. xxxx.execute-api.<region>.amazonaws.com)"
  PrimaryCustomApiDomainName:
    Type: String
    Description: "Domain name used for creating api gateway custom domain in primary region (e.g. primary.google.com)"
  BackupCustomApiDomainName:
    Type: String
    Description: "Domain name used for creating api gateway custom domain in backup (e.g. backup.google.com)"
  AdminEmail:
    Type: String
    Description: "Administrator email for failover notifications"
  HostedZoneName:
    Type: String
    Description: "The name of the Route 53 hosted zone (must end with a dot e.g. google.com.)"
  PrimaryHostedZoneID:
    Type: String
    Description: "eu-central-1 route 53 hosted zone ID"
  BackupHostedZoneID:
    Type: String
    Description: "eu-west-1 route 53 hosted zone ID"

Resources:
  Route53HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        ResourcePath: "/health"
        FullyQualifiedDomainName: !Ref PrimaryCustomApiDomainName
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: Name
          Value: "Primary API Health Check"

  Route53FailoverRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref PrimaryCustomApiDomainName
      Type: A
      SetIdentifier: "Primary"
      HealthCheckId: !Ref Route53HealthCheck
      Failover: PRIMARY
      AliasTarget:
        DNSName: !Ref PrimaryRegionalDomainName
        HostedZoneId: !Ref PrimaryHostedZoneID

  Route53FailoverRecordSecondary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref BackupCustomApiDomainName
      Type: A
      SetIdentifier: "Secondary"
      Failover: SECONDARY
      AliasTarget:
        DNSName: !Ref BackupRegionalDomainName
        HostedZoneId: !Ref BackupHostedZoneID

  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "API Gateway Health Alarm"
      MetricName: "HealthCheckStatus"
      Namespace: "AWS/Route53"
      Statistic: "Minimum"
      Period: 60
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: "LessThanThreshold"
      AlarmActions:
        - !Ref SNSTopic

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ApiFailoverNotification"

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: !Ref AdminEmail

  FailoverLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "FailoverNotificationLambda"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ADMIN_EMAIL: !Ref AdminEmail
          PRIMARY_API: !Ref PrimaryCustomApiDomainName
          BACKUP_API: !Ref BackupRegionalDomainName
          SNS_TOPIC_ARN: !Ref SNSTopic
      Code:
        ZipFile: |
          import os
          import boto3
          import json

          sns = boto3.client('sns')
          def lambda_handler(event, context):
              admin_email = os.environ['ADMIN_EMAIL']
              primary_api = os.environ['PRIMARY_API']
              secondary_api = os.environ['BACKUP_API']
              message = f"Primary API ({primary_api}) is down. Failover to Secondary API ({secondary_api}) initiated."
              response = sns.publish(
                  TopicArn=os.environ['SNS_TOPIC_ARN'],
                  Message=message,
                  Subject="API Gateway Failover Alert"
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Failover Notification Sent')
              }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaSNSPublish"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref SNSTopic
